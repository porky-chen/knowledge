前端知识
1、0.1 + 0.2 为什么不等于 0.3
控制台0.1 + 0.2 输出0.3000000000004，JavaScript并未定义不同类型的数字数据类型，始终遵循国际IEEE 754标准，将数字存储为双精度浮点数。以64位存储数字，数字（分数）存储在位 0 到 51 中，指数存储在位 52 到 62 中，符号存储在位 63 中。用科学计数法表示二进制0.1并只保留前52位

2、TCP/IP - 通信协议
TCP - (传输控制协议)应用程序之间的通信
IP - (网际协议)计算机之间的通信 ： 负责将每个包路由至目的地
HTTP - (超文本传输协议)，为web服务器和web浏览器之间通信,浏览器向服务器发送请求，服务器向浏览器返回内容
HTTPS - (安全的HTTP协议)，web服务求和web浏览器之间的安全通信
SSL - (安全套接字层),为安全数据传输加密数据
SMTP - (简易邮件传输协议),用于电子邮箱的传输
MIME - (多用途因特网邮件扩展),使SMTP有能力通过TCP/IP网络传输多媒体文件、包括声音、视频、二进制数据
IMAP - (英特网消息访问协议),用于存储和取回电子邮箱
POP - (邮局协议)，用于电子邮箱服务器向个人电脑下载电子邮件
FTP - (文件传输协议)，负责计算机之间的文件传输
NTP - (网络时间协议)，用于在计算机之间同步时间（钟）
DHCP - (动态主机配置协议),用于向网络中的计算机分配动态 IP 地址
SNMP - (简单网络管理协议),计算机网络的管理
LDAP - (轻量级的目录访问协议),用于从因特网搜集关于用户和电子邮件地址的信息
ICMP - (因特网消息控制协议),负责网络中的错误处理
BOOTP - Boot Protocol,用于从网络启动计算机
PPTP - 点对点隧道协议,用于私人网络之间的连接

3、http Referrer-Policy 引用策略
no-referrer : 访问来源信息不随着请求一起发送
no-referrer-when-downgrade : 在同等安全级别下，引用页面的地址会被发送（https->https）,但在降级的情况下不会被发送（https->http）
origin : 在任何情况下，仅发送文件的源作为引用地址，如https://example.com/page.html会将https://example.com作为引用地址
origin-when-cross-origin : 对同源发送请求,会发生完整url地址，不同源请求仅发送文件的源
same-origin : 同源请求会发送引用地址，非同源请求则不发送引用地址信息
strict-origin : 在同等安全级别下，发送文件的源作为引用地址（https->https）,但在降级的情况下不会被发送（https->http）
strict-origin-when-cross-origin : 同源请求,会发送完整的URL作为引用地址；在同等安全级别下，发送文件的源作为引用地址（https->https）;在降级的情况下不发送此首部(https->http) （Chrome 默认）
unsafe-url : 无论同源还是非同源都发生完整的URL(移除参数信息之后)作为引用地址

4、伪类、伪元素区别
（1）伪元素：::before、::after、::first-letter(首个字母)、::first-line(首行)、::selection(用户选择的部分)
设置元素指定部分的样式，如设置元素首字母、首行的样式、在元素的内容之前或之后插入内容；
（2）伪类：:active、:fitst-child、:lang(带lang属性)、:focus、:hover、<a>标签的:link(未被访问),:visited(已访问)等

5、CDN
一、前端工作根据CDN优化网站性能
（1）、静态文件与动态文件的不同处理：静态文件（img-css-video）占用资源大，可以使用CDN加速；静态HTML界面如果纯静态可以直接CDN加速，如果设计动态从源服务器获取文件；动态页面：当收到用户的请求，服务器对页面进行后台数据渲染到页面在返回给用户；静态页面：收到请求不做处理直接返回；
（2）、浏览器对同一个ip进行请求的最大并发连接数。不同浏览器的并发数量不一样，IE10、11，chrome，Firefox都是6，IE9是10
二、加入CDN后的浏览器访问过程
（1）、输入URL，经过本地DNS系统解析，DNS会最终会将解析权交给CNAME指向的CDN专用的DNS服务器；
（2）、CDN的DNS服务器将CDN的全局负载均衡设备IP地址返回给用户
（3）、用户向CDN的全局负载均衡设备发起内容URL访问请求
（4）、CDN全局负载均衡设备根据用户的IP地址，以及请求的URL，选择一台用户所属区域负载均衡设备，告诉用户向这台设备发起请求
（5）、区域负载均衡设备会为用户选择一台合适的缓存服务提供服务，选择依据包括：根据IP选择距离最近的一台服务器；根据请求的URL中携带的内容，判断哪一台服务器存在用户所需内容；查询各个服务器当前的负载情况，判断哪一台服务器有服务能力。综上分析，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的IP地址
（6）、全局负载均衡把服务器IP地址返回给用户
（7）、用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端
三、CDN优点
（1）、由于向服务器请求资源文件的时候，大部分服务器的带宽有限，超过了限制会大大降低响应速度。CND可以通过不同的域名来加载文件，从而使下载文件的并发连接数大大增加；
（2）、如果在不同的网站访问过相同的浏览器，CDN会把已经加载过的例如JS文件缓存下来，不需要重写下载
（3）、CDN具有更好的可用性，更低的网络延迟和丢包率
（4）、CDN能够提供本地的数据中心，避免远离网站主服务器的用户下载文件时间过长问题
（5）、很多商业付费的CDN能提供使用报告，这可以作为你自己网站分析报告的补充
（6）、CDN能够分配负载、节省带宽、提高网站的性能、减低网站托管的成本、
四、CDN缺点
（1）、开发阶段处于断网阶段，CDN文件是无法加载的
（2）、不够灵活
（3）、一些移动设备缓存可能很小而且效率很低，CDN优势就不明显
（4）、由于地理、法律、政策和商业上的阻隔，你所在的地区可能屏蔽了一些流行免费CDN服务的域名或IP地址
（5）、当CDN出故障，需要通过本地文件来解决，这种处于稳定考虑的冗余会增大开发工作量和复杂度
（6）、如果安全性重要，那么在使用公共的CDN的时候就会出写信息泄漏，https请求的的会大大减少能使用CDN的功能

6、宏任务(macro task)与微任务(micro task)
(1)、宏任务：每次执行栈执行的任务就是一个宏任务，包括script(整体代码)、setTimeout、setInterval、I\O、UI交互事件、postMessage、MessageChannel、setImmediate(node.环境)
(2)、微任务：当前 task 执行结束后立即执行的任务，当前task任务后，下一个task之前，在渲染之前。
(3)、微任务包括：promise.then,Object.observe,MutationObserver,process.nextTick(node.js)
(4)、宏任务->执行结束->有无微任务？有->执行微任务->浏览器渲染->下一个宏任务../无->浏览器渲染->下一个宏任务

7、SEO优化(搜索引擎优化)
（1）、网站布局优化：层级尽量不超过三级
（2）、清理垃圾代码：删除网页的冗余代码
（3）、少用iframe：搜索引擎不会抓取iframe中的内容
（4）、重要内容不要用JS输出：爬虫不会执行JS获取的内容
（5）、div + css布局：避免用table实现网页整体架构
（6）、控制首页链接数量，中小型在100个链接以内
（7）、导航优化
（8）、网站的结构布局
（9）、控制页面的大小，减少http请求，提高网站的加载速度
（10）、网页代码优化:<title>标题，<meta keywords>标签:关键字重要，<meta description>网页描述...
（11）、文本缩进用CSS样式不要用特殊符号&nbsp,CSS布局
（12）、谨慎使用display:none;不想显示可以通过z-index或设置到浏览器之外，display:none;会过滤
8、性能
 (1)、减少HTTP请求，合理设置HTTP缓存，有效提高访问性能；如合并CSS,合并图片,合并JS\缓存\
 (2)、使用浏览器缓存，js、css、logo、图标等静态资源文件将这些文件缓存在浏览器中，通过http头设置cache-control和expires的属性,可以设定浏览器缓存，
 (3)、启动压缩,服务器对文件进行压缩,浏览器对文件进行解压,有效减少通信传输的数据量,在通信良好而服务器资源不足情况下要权衡考虑，压缩对服务器和浏览器有一定压力
 (4)、CSS sprites,合并CSS图片，减少请求次数
 (5)、lazy load image，图片懒加载，
 (6)、CSS资源放在最上方，JavaScript资源放在最下方
 (7)、异步请求
 (8)、减少cookie传输
 (9)、JS代码优化：DOM操作、避免使用with(增加作用域链长度)、避免使用eval和Function、减少作用域链查找、字符串拼接、数据访问
 (10)、CSS选择符优化
 (11)、CDN加速

9、DNS（域名系统：域名和IP地址相互映射的一个分布式数据库）
· 对网站第一次的域名DNS解析查找流程：浏览器缓存->系统缓存->路由器缓存->ISP DNS缓存->递归搜索
· 减少DNS解析时间的次数是很好的优化方式
· DNS Prefetching具有此属性的域名不需要用户点击链接就在后台解析，域名解析和内容载入是串行网络操作，减少用户的等待时间，提升用户体验
· 对页面中没有出现的域进行预获取，使用显示DNS Prefetch
· 预解析用法<meta http-equiv="x-dns-prefetch-control" content="on">当前页面用DNS预解析
· <link rel="dns-prefetch" href="uri"> header中使用Link标签来强制对DNS预解析
· 禁用隐式的DNS-prefetch,<meta http-equiv="x-dns-prefetch-control" content="off">

10、vue中的防抖和节流
Vue没有内置支持防抖和节流，但可以使用Lodash等库来实现
如果某个组件仅使用一次，可以在methods中直接应用防抖:
由于可复用性组件，所以共享相同的防抖函数。为了使组件实例彼此独立，可以在created里添加该防抖函数


11、v-model内部不同原理
输入框text、textarea的是value 属性 和 input事件
radio、checkbox的 是checked 属性 和 change事件
select的是 value 属性 和 change 事件
.lazy修饰符可以把input事件改为change事件时更新
.number输入值转为数值
.trim去掉首位空格
为了让它正常工作，这个组件内的 <input> 必须：
将其 value attribute 绑定到一个名叫 modelValue 的 prop 上
在其 input 事件被触发时，将新的值通过自定义的 update:modelValue 事件抛出
